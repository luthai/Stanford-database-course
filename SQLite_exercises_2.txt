Q1. Find the names of all reviewers who rated Gone with the Wind.

SELECT DISTINCT(name)
FROM Movie NATURAL JOIN Rating NATURAL JOIN Reviewer
WHERE title = "Gone with the Wind"


Q2. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.

SELECT name, title, stars
FROM Movie NATURAL JOIN Rating NATURAL JOIN Reviewer
WHERE name = director


Q3. Return all reviewer names and movie names together in a single list, alphabetized. 
(Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

SELECT title
FROM Movie
UNION
SELECT name FROM Reviewer


Q4. Find the titles of all movies not reviewed by Chris Jackson. 

SELECT title
FROM Movie
EXCEPT
SELECT title
FROM Movie NATURAL JOIN Rating NATURAL JOIN Reviewer
WHERE name = "Chris Jackson"


Q5. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. 
Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. 	

SELECT DISTINCT reviewer.name, temp.name 
FROM Rating rating NATURAL JOIN Reviewer reviewer
LEFT JOIN (
    SELECT *
    FROM Rating NATURAL JOIN Reviewer
    GROUP BY mID, name) temp
WHERE temp.mID = rating.mID AND temp.name != reviewer.name AND reviewer.name < temp.name

---------------------------------------

select DISTINCT Re1.name as name1, Re2.name as name2
from Rating R1, Rating R2, Reviewer Re1, Reviewer Re2
where R1.mID = R2.mID
and R1.rID = Re1.rID
and R2.rID = Re2.rID
and Re1.name < Re2.name
order by Re1.name


Q6. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

SELECT name, title, stars
FROM RATING NATURAL JOIN Reviewer Natural Join Movie
WHERE stars = (SELECT MIN(stars) FROM RATING)



Q7. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.

SELECT title, avgStars
FROM Reviewer NATURAL JOIN Movie
NATURAL JOIN (
    SELECT *, AVG(stars) AS avgStars
    FROM Rating
    GROUP BY mID)
ORDER BY avgStars DESC, title ASC


Q8. Find the names of all reviewers who have contributed three or more ratings.

SELECT name
FROM Reviewer
NATURAL JOIN (
    SELECT rID, COUNT(rID) AS countRID
    FROM Rating
    GROUP BY rID) temp
WHERE temp.countRID > 2

-----------------------------------------------

SELECT name
FROM Reviewer
NATURAL JOIN 
Rating
GROUP BY rID
HAVING COUNT(*) > 2

-----------------------------------------------

SELECT name
FROM Reviewer
WHERE (
    SELECT COUNT(*) 
    FROM Rating 
    WHERE Rating.rId = Reviewer.rId) >= 3;


Q9. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.
	
SELECT title, director
FROM Movie
NATURAL JOIN (
    SELECT director
    FROM Movie
    GROUP BY director
    HAVING COUNT(*) >= 2) temp
WHERE temp.director = director;


Q10. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; 
you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 	

SELECT title, avg(Stars) AS avgStars
FROM Rating NATURAL JOIN Movie
GROUP BY mID
HAVING avgStars = ( 	
	SELECT MAX(avgStars)
    FROM (
        SELECT mID, avg(Stars) AS avgStars
        FROM Rating
        GROUP BY mID))