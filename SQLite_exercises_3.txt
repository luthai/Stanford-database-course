Q1. Find the names of all students who are friends with someone named Gabriel. 

SELECT name
FROM Highschooler H1
INNER JOIN (
    SELECT ID2
    FROM Friend INNER JOIN Highschooler
    ON ID1 = ID
    WHERE name = "Gabriel") temp
ON H1.ID = temp.ID2


Q2. For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. 

SELECT H1.name, H1.grade, temp.name, temp.grade    
FROM Highschooler H1
INNER JOIN (
    SELECT ID1, ID2, name, grade
    FROM Likes L2 NATURAL JOIN Highschooler H2
    WHERE ID2 = ID) temp
ON H1.ID = temp.ID1
AND H1.grade > temp.grade + 1


Q3. For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. 

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM (
    SELECT L1.ID1, L1.ID2
    FROM Likes L1
    WHERE EXISTS (
	    SELECT 1 
	    FROM Likes L2
	    WHERE L1.ID1 = L2.ID2
	    AND L1.ID2 = L2.ID1)) a
INNER JOIN Highschooler H1
ON H1.ID = a.ID1
INNER JOIN Highschooler H2
ON H2.ID = a.ID2
WHERE H1.name < H2.name

---------------------------------------

SELECT L1.ID1, L1.ID2
FROM Likes L1  
INNER JOIN Likes L2
ON L1.ID1 = L2.ID2
AND L1.ID2 = L2.ID1


Q4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. 

SELECT name, grade 
FROM Highschooler H1
LEFT JOIN Likes L1 ON L1.ID1 = H1.ID
LEFT JOIN Likes L2 ON L2.ID2 = H1.ID
WHERE L1.ID1 IS NULL
AND L1.ID2 IS NULL
AND L2.ID1 IS NULL
AND L2.ID2 IS NULL

------------------------------------------

SELECT name, grade
FROM Highschooler
WHERE ID NOT IN (
  SELECT DISTINCT ID1
  FROM Likes
  UNION
  SELECT DISTINCT ID2
  FROM Likes
)


Q5. For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM (
    SELECT *
    FROM Likes L1
    WHERE NOT EXISTS (
        SELECT 1
        FROM Likes L2
        WHERE L1.ID2 = L2.ID1))a
INNER JOIN Highschooler H1
ON H1.ID = a.ID1
INNER JOIN Highschooler H2
ON H2.ID = a.ID2


Q6. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. 

SELECT name, grade
FROM Highschooler H1
WHERE ID NOT IN (
    SELECT ID1
    FROM Friend F1, Highschooler H2
    WHERE H1.ID = F1.ID1
    AND H2.ID = F1.ID2
    AND H1.grade <> H2.grade)
ORDER BY grade, name


Q7. For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 

SELECT H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
FROM Highschooler H1, Highschooler H2, Highschooler H3, Likes L1, Friend F1, Friend F2
WHERE H1.ID = L1.ID1 AND H2.ID = L1.ID2
AND L1.ID2 NOT IN (
    SELECT ID2
    FROM Friend
    WHERE ID1 = H1.ID)
AND F1.ID1 = H1.ID
AND F2.ID2 = H2.ID
AND H3.ID = F1.ID2
AND H3.ID = F2.ID1


Q8. Find the difference between the number of students in the school and the number of different first names. 

SELECT COUNT(ID) - COUNT(DISTINCT name)
FROM Highschooler


Q9. Find the name and grade of all students who are liked by more than one other student. 

SELECT H1.name, H1.grade
FROM Highschooler H1
NATURAL JOIN (
    SELECT *, COUNT(ID2) AS count
    FROM Likes
    GROUP BY ID2) a
WHERE a.count > 1
AND H1.ID = a.ID2